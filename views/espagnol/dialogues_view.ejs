<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dialogues g√©n√©r√©s</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <%- include('../partials/navbar') %>
</head>
<body class="bg-light">

    <div class="container mt-5">
        <h1 class="text-center mb-4">üéôÔ∏è Dialogues g√©n√©r√©s pour <strong><%= file.filename %></strong></h1>

        <!-- Configuration des voix -->
        <div class="card shadow mb-4">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Configuration de la synth√®se vocale (Amazon Polly)</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <label for="voice-a" class="form-label">Voix pour Personne A:</label>
                        <select id="voice-a" class="form-select"></select>
                    </div>
                    <div class="col-md-6">
                        <label for="voice-b" class="form-label">Voix pour Personne B:</label>
                        <select id="voice-b" class="form-select"></select>
                    </div>
                </div>
            </div>
        </div>

        <div class="card shadow">
            <div class="card-body">
                <div id="audio-controls" class="mb-3 text-center">
                    <button id="play-all" class="btn btn-success me-2">
                        <i class="fas fa-play"></i> Lire tous les dialogues
                    </button>
                    <button id="stop-all" class="btn btn-danger" disabled>
                        <i class="fas fa-stop"></i> Arr√™ter
                    </button>
                </div>
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th style="width: 45%">üó£Ô∏è Personne A</th>
                                <th style="width: 5%">üîä</th>
                                <th style="width: 45%">üó£Ô∏è Personne B</th>
                                <th style="width: 5%">üîä</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% if (dialogue && dialogue.lignes && dialogue.lignes.length > 0) { %>
                                <% dialogue.lignes.forEach(function(ligne) { %>
                                    <tr class="dialogue-row" data-dialogue-id="<%= dialogue.id %>">
                                    <td>
                                        <div class="text-wrap"><%= ligne.personne_a %></div>
                                    </td>
                                    <td>
                                        <button class="btn btn-outline-primary btn-sm speak-btn" 
                                                data-person="a" 
                                                data-text="<%= ligne.personne_a %>">
                                            <i class="fas fa-volume-up"></i>
                                        </button>
                                    </td>
                                    <td>
                                        <div class="text-wrap"><%= ligne.personne_b %></div>
                                    </td>
                                    <td>
                                        <button class="btn btn-outline-primary btn-sm speak-btn" 
                                                data-person="b" 
                                                data-text="<%= ligne.personne_b %>">
                                            <i class="fas fa-volume-up"></i>
                                        </button>
                                    </td>
                                </tr>
                                <% }); %>
                            <% } else { %>
                                <tr>
                                    <td colspan="4" class="text-muted text-center">Aucun dialogue trouv√©.</td>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="text-center mt-4">
            <a href="/espagnol/dialogues" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Retour √† la liste
            </a>
        </div>
    </div>

    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 5">
        <div id="toast-container"></div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', async () => {
            // R√©cup√©ration des √©l√©ments DOM
            const voiceASelect = document.getElementById('voice-a');
            const voiceBSelect = document.getElementById('voice-b');
            const playAllBtn = document.getElementById('play-all');
            const stopAllBtn = document.getElementById('stop-all');
            const speakButtons = document.querySelectorAll('.speak-btn');
            const toastContainer = document.getElementById('toast-container');
            
            // Variables pour la lecture
            let currentAudio = null;
            let isPlaying = false;
            let playQueue = [];
            let playQueueIndex = 0;
            let activeButton = null;
            
            // D√©lai avant sauvegarde automatique (en ms)
            const saveDelay = 1000;
            
            // Fonction pour sauvegarder les pr√©f√©rences de voix
            let saveTimeout = null;
            
            async function saveVoiceSettings() {
                try {
                    const response = await fetch('/espagnol/api/voice-settings', {
                        method: 'POST',
                        credentials: 'same-origin', // Ajout pour envoyer les cookies
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            voice_a: voiceASelect.value,
                            voice_b: voiceBSelect.value
                        })
                    });
                    
                    if (response.ok) {
                        console.log('Pr√©f√©rences de voix sauvegard√©es');
                    } else {
                        console.error('Erreur lors de la sauvegarde des pr√©f√©rences');
                    }
                } catch (error) {
                    console.error('Erreur lors de la sauvegarde des pr√©f√©rences:', error);
                }
            }
            
            // Fonction pour programmer une sauvegarde diff√©r√©e
            function scheduleSave() {
                // Annuler tout d√©lai pr√©c√©dent
                if (saveTimeout) {
                    clearTimeout(saveTimeout);
                }
                
                // Programmer une nouvelle sauvegarde
                saveTimeout = setTimeout(saveVoiceSettings, saveDelay);
            }
            
            // R√©cup√©rer les pr√©f√©rences sauvegard√©es
            let savedSettings = null;
            try {
                const response = await fetch('/espagnol/api/voice-settings', {
                    credentials: 'same-origin' // Ajout pour envoyer les cookies
                });
                if (response.ok) {
                    savedSettings = await response.json();
                    console.log('Pr√©f√©rences de voix r√©cup√©r√©es:', savedSettings);
                }
            } catch (error) {
                console.error('Erreur lors de la r√©cup√©ration des pr√©f√©rences:', error);
            }
            
            // Chargement des voix disponibles
            try {
                const response = await fetch('/espagnol/api/polly/voices?language=es-ES', {
                    credentials: 'same-origin' // Ajout pour envoyer les cookies
                });
                if (!response.ok) throw new Error('Erreur lors du chargement des voix');
                
                const voices = await response.json();
                
                // Remplir les s√©lecteurs de voix
                voices.forEach(voice => {
                    const optionA = document.createElement('option');
                    optionA.value = voice.id;
                    optionA.textContent = `${voice.name} (${voice.gender})`;
                    voiceASelect.appendChild(optionA);
                    
                    const optionB = document.createElement('option');
                    optionB.value = voice.id;
                    optionB.textContent = `${voice.name} (${voice.gender})`;
                    voiceBSelect.appendChild(optionB);
                });
                
                // Utiliser les pr√©f√©rences sauvegard√©es ou les valeurs par d√©faut
                if (savedSettings) {
                    voiceASelect.value = savedSettings.voice_a;
                    voiceBSelect.value = savedSettings.voice_b;
                } else {
                    // S√©lectionner une voix masculine pour A et f√©minine pour B par d√©faut
                    const maleVoice = voices.find(v => v.gender === 'Male')?.id || voices[0]?.id;
                    const femaleVoice = voices.find(v => v.gender === 'Female')?.id || voices[0]?.id;
                    
                    if (maleVoice) voiceASelect.value = maleVoice;
                    if (femaleVoice) voiceBSelect.value = femaleVoice;
                }
                
            } catch (error) {
                console.error('Erreur lors du chargement des voix:', error);
                showToast('Erreur lors du chargement des voix. Utilisation des voix par d√©faut.', 'danger');
                
                // Ajouter des options par d√©faut
                const defaultVoices = [
                    { id: 'Enrique', name: 'Enrique (Male)' },
                    { id: 'Lucia', name: 'Lucia (Female)' }
                ];
                
                defaultVoices.forEach(voice => {
                    const optionA = document.createElement('option');
                    optionA.value = voice.id;
                    optionA.textContent = voice.name;
                    voiceASelect.appendChild(optionA);
                    
                    const optionB = document.createElement('option');
                    optionB.value = voice.id;
                    optionB.textContent = voice.name;
                    voiceBSelect.appendChild(optionB);
                });
                
                // Utiliser les pr√©f√©rences sauvegard√©es ou les valeurs par d√©faut
                if (savedSettings) {
                    voiceASelect.value = savedSettings.voice_a;
                    voiceBSelect.value = savedSettings.voice_b;
                } else {
                    voiceASelect.value = 'Enrique';
                    voiceBSelect.value = 'Lucia';
                }
            }
            
            // Ajouter des √©couteurs pour les changements de voix
            voiceASelect.addEventListener('change', scheduleSave);
            voiceBSelect.addEventListener('change', scheduleSave);
            
            // Fonction pour la synth√®se vocale
            async function speak(text, voiceId) {
                try {
                    // Annuler tout audio en cours
                    if (currentAudio) {
                        const oldAudio = currentAudio;
                        currentAudio = null;
                        
                        oldAudio.onended = null;
                        oldAudio.onerror = null;
                        oldAudio.pause();
                    }
                    
                    console.log(`Synth√®se vocale pour: "${text.substring(0, 30)}..." avec voix: ${voiceId}`);
                    
                    const response = await fetch('/espagnol/api/polly', {
                        method: 'POST',
                        credentials: 'same-origin', // Ajout pour envoyer les cookies
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ 
                            text: text, 
                            voice: voiceId,
                            language: 'es-ES'
                        })
                    });
                    
                    if (!response.ok) {
                        throw new Error(`Erreur HTTP: ${response.status}`);
                    }
                    
                    const audioBlob = await response.blob();
                    const audioUrl = URL.createObjectURL(audioBlob);
                    
                    currentAudio = new Audio(audioUrl);
                    
                    // Cr√©er une promesse pour attendre la fin de l'audio
                    return new Promise((resolve) => {
                        // G√©rer la fin de lecture normale
                        currentAudio.onended = () => {
                            console.log("Audio termin√© naturellement");
                            if (isPlaying && playQueue.length > 0 && playQueueIndex < playQueue.length) {
                                playNextInQueue();
                                resolve(true);
                            } else {
                                if (isPlaying) {
                                    console.log("Fin de la file d'attente");
                                    stopPlayback();
                                }
                                resolve(true);
                            }
                        };
                        
                        // G√©rer les erreurs
                        currentAudio.onerror = (e) => {
                            console.error('Erreur de lecture audio:', e);
                            showToast('Erreur de lecture audio', 'danger');
                            if (isPlaying) stopPlayback();
                            resolve(false);
                        };
                        
                        // Lancer la lecture
                        currentAudio.play().catch(error => {
                            console.error("Erreur au lancement de l'audio:", error);
                            showToast('Erreur au lancement de l\'audio', 'danger');
                            resolve(false);
                        });
                    });
                    
                } catch (error) {
                    console.error('Erreur lors de la synth√®se vocale:', error);
                    showToast('Erreur lors de la synth√®se vocale', 'danger');
                    return false;
                }
            }
            
            // Fonction pour afficher des notifications toast
            function showToast(message, type = 'info') {
                const toastEl = document.createElement('div');
                toastEl.className = `toast align-items-center text-white bg-${type} border-0`;
                toastEl.setAttribute('role', 'alert');
                toastEl.setAttribute('aria-live', 'assertive');
                toastEl.setAttribute('aria-atomic', 'true');
                
                toastEl.innerHTML = `
                    <div class="d-flex">
                        <div class="toast-body">
                            ${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                `;
                
                toastContainer.appendChild(toastEl);
                
                const toast = new bootstrap.Toast(toastEl, { autohide: true, delay: 5000 });
                toast.show();
                
                toastEl.addEventListener('hidden.bs.toast', () => {
                    toastContainer.removeChild(toastEl);
                });
            }
            
            // Fonction pour jouer le dialogue complet
            function buildPlayQueue() {
                const dialogueRows = document.querySelectorAll('.dialogue-row');
                playQueue = [];
                
                dialogueRows.forEach(row => {
                    const personAText = row.querySelector('[data-person="a"]').dataset.text;
                    const personBText = row.querySelector('[data-person="b"]').dataset.text;
                    
                    playQueue.push({
                        text: personAText,
                        voiceId: voiceASelect.value
                    });
                    
                    playQueue.push({
                        text: personBText,
                        voiceId: voiceBSelect.value
                    });
                });
                
                return playQueue;
            }
            
            // Fonction pour jouer l'√©l√©ment suivant dans la file
            async function playNextInQueue() {
                if (playQueueIndex < playQueue.length) {
                    const item = playQueue[playQueueIndex];
                    playQueueIndex++;
                    
                    const success = await speak(item.text, item.voiceId);
                    if (!success && isPlaying) {
                        playNextInQueue();
                    }
                } else {
                    stopPlayback();
                }
            }
            
            // Fonction pour arr√™ter la lecture
            function stopPlayback() {
                console.log("Arr√™t de la lecture...");
                isPlaying = false;
                
                if (currentAudio) {
                    // Supprimer tous les gestionnaires d'√©v√©nements avant de mettre en pause
                    const oldAudio = currentAudio;
                    currentAudio = null;
                    
                    oldAudio.onended = null;
                    oldAudio.onerror = null;
                    oldAudio.pause();
                    
                    // Tenter de lib√©rer les ressources
                    try {
                        oldAudio.src = '';
                        oldAudio.load();
                    } catch (e) {
                        console.error("Erreur lors de la lib√©ration des ressources audio:", e);
                    }
                }
                
                // R√©initialiser l'√©tat de lecture
                playQueueIndex = 0;
                playQueue = [];
                
                // R√©initialiser le bouton actif
                if (activeButton) {
                    activeButton.classList.remove('btn-primary');
                    activeButton.classList.add('btn-outline-primary');
                    activeButton = null;
                }
                
                // Mettre √† jour l'interface
                playAllBtn.disabled = false;
                stopAllBtn.disabled = true;
                
                console.log("Lecture arr√™t√©e avec succ√®s");
            }
            
            // √âv√©nement pour jouer tous les dialogues
            playAllBtn.addEventListener('click', function() {
                console.log("D√©marrage de la lecture compl√®te...");
                playQueue = buildPlayQueue();
                playQueueIndex = 0;
                isPlaying = true;
                
                playAllBtn.disabled = true;
                stopAllBtn.disabled = false;
                
                playNextInQueue();
            });
            
            // √âv√©nement pour arr√™ter la lecture - utilisation d'une fonction fl√©ch√©e explicite
            stopAllBtn.addEventListener('click', function() {
                console.log("Bouton d'arr√™t cliqu√©!");
                stopPlayback();
            });
            
            // √âv√©nements pour les boutons de lecture individuels
            speakButtons.forEach(button => {
                button.addEventListener('click', async () => {
                    // Arr√™ter la lecture en cours (y compris celle d'un bouton pr√©c√©dent)
                    if (isPlaying) {
                        stopPlayback();
                    }
                    
                    const person = button.dataset.person;
                    const text = button.dataset.text;
                    const voiceId = person === 'a' ? voiceASelect.value : voiceBSelect.value;
                    
                    // Activer le bouton d'arr√™t
                    isPlaying = true;
                    stopAllBtn.disabled = false;
                    
                    // Garder une r√©f√©rence au bouton actif
                    activeButton = button;
                    
                    // Mettre en surbrillance le bouton pendant la lecture
                    button.classList.add('btn-primary');
                    button.classList.remove('btn-outline-primary');
                    
                    const success = await speak(text, voiceId);
                    
                    // Si la lecture a √©chou√© ou s'est termin√©e naturellement
                    if (!success || !isPlaying) {
                        button.classList.remove('btn-primary');
                        button.classList.add('btn-outline-primary');
                        
                        // Si aucun autre audio n'est en cours de lecture
                        if (!currentAudio || currentAudio.paused) {
                            isPlaying = false;
                            stopAllBtn.disabled = true;
                            activeButton = null;
                        }
                    }
                });
            });
        });
    </script>
</body>
</html>